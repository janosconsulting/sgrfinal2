//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Mantenimiento.Datos.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Articulo))]
    
    public partial class ArticuloAutor: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int idArticuloAutor
        {
            get { return _idArticuloAutor; }
            set
            {
                if (_idArticuloAutor != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'idArticuloAutor' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _idArticuloAutor = value;
                    OnPropertyChanged("idArticuloAutor");
                }
            }
        }
        private int _idArticuloAutor;
    
        [DataMember]
        public int idArticulo
        {
            get { return _idArticulo; }
            set
            {
                if (_idArticulo != value)
                {
                    ChangeTracker.RecordOriginalValue("idArticulo", _idArticulo);
                    if (!IsDeserializing)
                    {
                        if (Articulo != null && Articulo.idArticulo != value)
                        {
                            Articulo = null;
                        }
                    }
                    _idArticulo = value;
                    OnPropertyChanged("idArticulo");
                }
            }
        }
        private int _idArticulo;
    
        [DataMember]
        public string nombres
        {
            get { return _nombres; }
            set
            {
                if (_nombres != value)
                {
                    _nombres = value;
                    OnPropertyChanged("nombres");
                }
            }
        }
        private string _nombres;
    
        [DataMember]
        public string correo
        {
            get { return _correo; }
            set
            {
                if (_correo != value)
                {
                    _correo = value;
                    OnPropertyChanged("correo");
                }
            }
        }
        private string _correo;
    
        [DataMember]
        public int idEstado
        {
            get { return _idEstado; }
            set
            {
                if (_idEstado != value)
                {
                    _idEstado = value;
                    OnPropertyChanged("idEstado");
                }
            }
        }
        private int _idEstado;

        #endregion

        #region Propiedades de navegación
    
        [DataMember]
        public Articulo Articulo
        {
            get { return _articulo; }
            set
            {
                if (!ReferenceEquals(_articulo, value))
                {
                    var previousValue = _articulo;
                    _articulo = value;
                    FixupArticulo(previousValue);
                    OnNavigationPropertyChanged("Articulo");
                }
            }
        }
        private Articulo _articulo;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Articulo = null;
        }

        #endregion

        #region Corrección de asociación
    
        private void FixupArticulo(Articulo previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ArticuloAutor.Contains(this))
            {
                previousValue.ArticuloAutor.Remove(this);
            }
    
            if (Articulo != null)
            {
                if (!Articulo.ArticuloAutor.Contains(this))
                {
                    Articulo.ArticuloAutor.Add(this);
                }
    
                idArticulo = Articulo.idArticulo;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Articulo")
                    && (ChangeTracker.OriginalValues["Articulo"] == Articulo))
                {
                    ChangeTracker.OriginalValues.Remove("Articulo");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Articulo", previousValue);
                }
                if (Articulo != null && !Articulo.ChangeTracker.ChangeTrackingEnabled)
                {
                    Articulo.StartTracking();
                }
            }
        }

        #endregion

    }
}
