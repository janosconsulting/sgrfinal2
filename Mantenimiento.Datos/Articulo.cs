//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Mantenimiento.Datos.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Autor))]
    [KnownType(typeof(ArticuloAutor))]
    [KnownType(typeof(ArticuloConclusion))]
    [KnownType(typeof(ArticuloReferencia))]
    [KnownType(typeof(ArticuloAdjunto))]
    
    public partial class Articulo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int idArticulo
        {
            get { return _idArticulo; }
            set
            {
                if (_idArticulo != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'idArticulo' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _idArticulo = value;
                    OnPropertyChanged("idArticulo");
                }
            }
        }
        private int _idArticulo;
    
        [DataMember]
        public int idAutor
        {
            get { return _idAutor; }
            set
            {
                if (_idAutor != value)
                {
                    ChangeTracker.RecordOriginalValue("idAutor", _idAutor);
                    if (!IsDeserializing)
                    {
                        if (Autor != null && Autor.idAutor != value)
                        {
                            Autor = null;
                        }
                    }
                    _idAutor = value;
                    OnPropertyChanged("idAutor");
                }
            }
        }
        private int _idAutor;
    
        [DataMember]
        public string titulo
        {
            get { return _titulo; }
            set
            {
                if (_titulo != value)
                {
                    _titulo = value;
                    OnPropertyChanged("titulo");
                }
            }
        }
        private string _titulo;
    
        [DataMember]
        public string resumen
        {
            get { return _resumen; }
            set
            {
                if (_resumen != value)
                {
                    _resumen = value;
                    OnPropertyChanged("resumen");
                }
            }
        }
        private string _resumen;
    
        [DataMember]
        public string introduccion
        {
            get { return _introduccion; }
            set
            {
                if (_introduccion != value)
                {
                    _introduccion = value;
                    OnPropertyChanged("introduccion");
                }
            }
        }
        private string _introduccion;
    
        [DataMember]
        public string metodologia
        {
            get { return _metodologia; }
            set
            {
                if (_metodologia != value)
                {
                    _metodologia = value;
                    OnPropertyChanged("metodologia");
                }
            }
        }
        private string _metodologia;
    
        [DataMember]
        public string desarrollo
        {
            get { return _desarrollo; }
            set
            {
                if (_desarrollo != value)
                {
                    _desarrollo = value;
                    OnPropertyChanged("desarrollo");
                }
            }
        }
        private string _desarrollo;
    
        [DataMember]
        public string experimentacion
        {
            get { return _experimentacion; }
            set
            {
                if (_experimentacion != value)
                {
                    _experimentacion = value;
                    OnPropertyChanged("experimentacion");
                }
            }
        }
        private string _experimentacion;
    
        [DataMember]
        public int idEstado
        {
            get { return _idEstado; }
            set
            {
                if (_idEstado != value)
                {
                    _idEstado = value;
                    OnPropertyChanged("idEstado");
                }
            }
        }
        private int _idEstado;
    
        [DataMember]
        public Nullable<System.DateTime> fechaPublicacion
        {
            get { return _fechaPublicacion; }
            set
            {
                if (_fechaPublicacion != value)
                {
                    _fechaPublicacion = value;
                    OnPropertyChanged("fechaPublicacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaPublicacion;
    
        [DataMember]
        public Nullable<System.DateTime> fechaRegistro
        {
            get { return _fechaRegistro; }
            set
            {
                if (_fechaRegistro != value)
                {
                    _fechaRegistro = value;
                    OnPropertyChanged("fechaRegistro");
                }
            }
        }
        private Nullable<System.DateTime> _fechaRegistro;
    
        [DataMember]
        public string nombreArchivo
        {
            get { return _nombreArchivo; }
            set
            {
                if (_nombreArchivo != value)
                {
                    _nombreArchivo = value;
                    OnPropertyChanged("nombreArchivo");
                }
            }
        }
        private string _nombreArchivo;
    
        [DataMember]
        public string extensionArchivo
        {
            get { return _extensionArchivo; }
            set
            {
                if (_extensionArchivo != value)
                {
                    _extensionArchivo = value;
                    OnPropertyChanged("extensionArchivo");
                }
            }
        }
        private string _extensionArchivo;
    
        [DataMember]
        public string rutaArchivo
        {
            get { return _rutaArchivo; }
            set
            {
                if (_rutaArchivo != value)
                {
                    _rutaArchivo = value;
                    OnPropertyChanged("rutaArchivo");
                }
            }
        }
        private string _rutaArchivo;
    
        [DataMember]
        public string palabrasClave
        {
            get { return _palabrasClave; }
            set
            {
                if (_palabrasClave != value)
                {
                    _palabrasClave = value;
                    OnPropertyChanged("palabrasClave");
                }
            }
        }
        private string _palabrasClave;

        #endregion

        #region Propiedades de navegación
    
        [DataMember]
        public Autor Autor
        {
            get { return _autor; }
            set
            {
                if (!ReferenceEquals(_autor, value))
                {
                    var previousValue = _autor;
                    _autor = value;
                    FixupAutor(previousValue);
                    OnNavigationPropertyChanged("Autor");
                }
            }
        }
        private Autor _autor;
    
        [DataMember]
        public TrackableCollection<ArticuloAutor> ArticuloAutor
        {
            get
            {
                if (_articuloAutor == null)
                {
                    _articuloAutor = new TrackableCollection<ArticuloAutor>();
                    _articuloAutor.CollectionChanged += FixupArticuloAutor;
                }
                return _articuloAutor;
            }
            set
            {
                if (!ReferenceEquals(_articuloAutor, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_articuloAutor != null)
                    {
                        _articuloAutor.CollectionChanged -= FixupArticuloAutor;
                    }
                    _articuloAutor = value;
                    if (_articuloAutor != null)
                    {
                        _articuloAutor.CollectionChanged += FixupArticuloAutor;
                    }
                    OnNavigationPropertyChanged("ArticuloAutor");
                }
            }
        }
        private TrackableCollection<ArticuloAutor> _articuloAutor;
    
        [DataMember]
        public TrackableCollection<ArticuloConclusion> ArticuloConclusion
        {
            get
            {
                if (_articuloConclusion == null)
                {
                    _articuloConclusion = new TrackableCollection<ArticuloConclusion>();
                    _articuloConclusion.CollectionChanged += FixupArticuloConclusion;
                }
                return _articuloConclusion;
            }
            set
            {
                if (!ReferenceEquals(_articuloConclusion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_articuloConclusion != null)
                    {
                        _articuloConclusion.CollectionChanged -= FixupArticuloConclusion;
                    }
                    _articuloConclusion = value;
                    if (_articuloConclusion != null)
                    {
                        _articuloConclusion.CollectionChanged += FixupArticuloConclusion;
                    }
                    OnNavigationPropertyChanged("ArticuloConclusion");
                }
            }
        }
        private TrackableCollection<ArticuloConclusion> _articuloConclusion;
    
        [DataMember]
        public TrackableCollection<ArticuloReferencia> ArticuloReferencia
        {
            get
            {
                if (_articuloReferencia == null)
                {
                    _articuloReferencia = new TrackableCollection<ArticuloReferencia>();
                    _articuloReferencia.CollectionChanged += FixupArticuloReferencia;
                }
                return _articuloReferencia;
            }
            set
            {
                if (!ReferenceEquals(_articuloReferencia, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_articuloReferencia != null)
                    {
                        _articuloReferencia.CollectionChanged -= FixupArticuloReferencia;
                    }
                    _articuloReferencia = value;
                    if (_articuloReferencia != null)
                    {
                        _articuloReferencia.CollectionChanged += FixupArticuloReferencia;
                    }
                    OnNavigationPropertyChanged("ArticuloReferencia");
                }
            }
        }
        private TrackableCollection<ArticuloReferencia> _articuloReferencia;
    
        [DataMember]
        public TrackableCollection<ArticuloAdjunto> ArticuloAdjunto
        {
            get
            {
                if (_articuloAdjunto == null)
                {
                    _articuloAdjunto = new TrackableCollection<ArticuloAdjunto>();
                    _articuloAdjunto.CollectionChanged += FixupArticuloAdjunto;
                }
                return _articuloAdjunto;
            }
            set
            {
                if (!ReferenceEquals(_articuloAdjunto, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_articuloAdjunto != null)
                    {
                        _articuloAdjunto.CollectionChanged -= FixupArticuloAdjunto;
                    }
                    _articuloAdjunto = value;
                    if (_articuloAdjunto != null)
                    {
                        _articuloAdjunto.CollectionChanged += FixupArticuloAdjunto;
                    }
                    OnNavigationPropertyChanged("ArticuloAdjunto");
                }
            }
        }
        private TrackableCollection<ArticuloAdjunto> _articuloAdjunto;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Autor = null;
            ArticuloAutor.Clear();
            ArticuloConclusion.Clear();
            ArticuloReferencia.Clear();
            ArticuloAdjunto.Clear();
        }

        #endregion

        #region Corrección de asociación
    
        private void FixupAutor(Autor previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Articulo.Contains(this))
            {
                previousValue.Articulo.Remove(this);
            }
    
            if (Autor != null)
            {
                if (!Autor.Articulo.Contains(this))
                {
                    Autor.Articulo.Add(this);
                }
    
                idAutor = Autor.idAutor;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Autor")
                    && (ChangeTracker.OriginalValues["Autor"] == Autor))
                {
                    ChangeTracker.OriginalValues.Remove("Autor");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Autor", previousValue);
                }
                if (Autor != null && !Autor.ChangeTracker.ChangeTrackingEnabled)
                {
                    Autor.StartTracking();
                }
            }
        }
    
        private void FixupArticuloAutor(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArticuloAutor item in e.NewItems)
                {
                    item.Articulo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArticuloAutor", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArticuloAutor item in e.OldItems)
                {
                    if (ReferenceEquals(item.Articulo, this))
                    {
                        item.Articulo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArticuloAutor", item);
                    }
                }
            }
        }
    
        private void FixupArticuloConclusion(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArticuloConclusion item in e.NewItems)
                {
                    item.Articulo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArticuloConclusion", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArticuloConclusion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Articulo, this))
                    {
                        item.Articulo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArticuloConclusion", item);
                    }
                }
            }
        }
    
        private void FixupArticuloReferencia(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArticuloReferencia item in e.NewItems)
                {
                    item.Articulo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArticuloReferencia", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArticuloReferencia item in e.OldItems)
                {
                    if (ReferenceEquals(item.Articulo, this))
                    {
                        item.Articulo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArticuloReferencia", item);
                    }
                }
            }
        }
    
        private void FixupArticuloAdjunto(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArticuloAdjunto item in e.NewItems)
                {
                    item.Articulo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArticuloAdjunto", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArticuloAdjunto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Articulo, this))
                    {
                        item.Articulo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArticuloAdjunto", item);
                    }
                }
            }
        }

        #endregion

    }
}
