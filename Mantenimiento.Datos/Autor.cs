//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Mantenimiento.Datos.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Articulo))]
    [KnownType(typeof(DocumentoIdentidad))]
    [KnownType(typeof(Usuario))]
    
    public partial class Autor: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int idAutor
        {
            get { return _idAutor; }
            set
            {
                if (_idAutor != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'idAutor' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _idAutor = value;
                    OnPropertyChanged("idAutor");
                }
            }
        }
        private int _idAutor;
    
        [DataMember]
        public Nullable<int> esAlumno
        {
            get { return _esAlumno; }
            set
            {
                if (_esAlumno != value)
                {
                    _esAlumno = value;
                    OnPropertyChanged("esAlumno");
                }
            }
        }
        private Nullable<int> _esAlumno;
    
        [DataMember]
        public int idTipoIdentidad
        {
            get { return _idTipoIdentidad; }
            set
            {
                if (_idTipoIdentidad != value)
                {
                    ChangeTracker.RecordOriginalValue("idTipoIdentidad", _idTipoIdentidad);
                    if (!IsDeserializing)
                    {
                        if (DocumentoIdentidad != null && DocumentoIdentidad.idDocumentoIdentidad != value)
                        {
                            DocumentoIdentidad = null;
                        }
                    }
                    _idTipoIdentidad = value;
                    OnPropertyChanged("idTipoIdentidad");
                }
            }
        }
        private int _idTipoIdentidad;
    
        [DataMember]
        public System.DateTime fechaRegistro
        {
            get { return _fechaRegistro; }
            set
            {
                if (_fechaRegistro != value)
                {
                    _fechaRegistro = value;
                    OnPropertyChanged("fechaRegistro");
                }
            }
        }
        private System.DateTime _fechaRegistro;
    
        [DataMember]
        public string nroIdentidad
        {
            get { return _nroIdentidad; }
            set
            {
                if (_nroIdentidad != value)
                {
                    _nroIdentidad = value;
                    OnPropertyChanged("nroIdentidad");
                }
            }
        }
        private string _nroIdentidad;
    
        [DataMember]
        public string nombres
        {
            get { return _nombres; }
            set
            {
                if (_nombres != value)
                {
                    _nombres = value;
                    OnPropertyChanged("nombres");
                }
            }
        }
        private string _nombres;
    
        [DataMember]
        public string apellidoPaterno
        {
            get { return _apellidoPaterno; }
            set
            {
                if (_apellidoPaterno != value)
                {
                    _apellidoPaterno = value;
                    OnPropertyChanged("apellidoPaterno");
                }
            }
        }
        private string _apellidoPaterno;
    
        [DataMember]
        public string apellidoMaterno
        {
            get { return _apellidoMaterno; }
            set
            {
                if (_apellidoMaterno != value)
                {
                    _apellidoMaterno = value;
                    OnPropertyChanged("apellidoMaterno");
                }
            }
        }
        private string _apellidoMaterno;
    
        [DataMember]
        public Nullable<int> idEstado
        {
            get { return _idEstado; }
            set
            {
                if (_idEstado != value)
                {
                    _idEstado = value;
                    OnPropertyChanged("idEstado");
                }
            }
        }
        private Nullable<int> _idEstado;
    
        [DataMember]
        public string biografia
        {
            get { return _biografia; }
            set
            {
                if (_biografia != value)
                {
                    _biografia = value;
                    OnPropertyChanged("biografia");
                }
            }
        }
        private string _biografia;

        #endregion

        #region Propiedades de navegación
    
        [DataMember]
        public TrackableCollection<Articulo> Articulo
        {
            get
            {
                if (_articulo == null)
                {
                    _articulo = new TrackableCollection<Articulo>();
                    _articulo.CollectionChanged += FixupArticulo;
                }
                return _articulo;
            }
            set
            {
                if (!ReferenceEquals(_articulo, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_articulo != null)
                    {
                        _articulo.CollectionChanged -= FixupArticulo;
                    }
                    _articulo = value;
                    if (_articulo != null)
                    {
                        _articulo.CollectionChanged += FixupArticulo;
                    }
                    OnNavigationPropertyChanged("Articulo");
                }
            }
        }
        private TrackableCollection<Articulo> _articulo;
    
        [DataMember]
        public DocumentoIdentidad DocumentoIdentidad
        {
            get { return _documentoIdentidad; }
            set
            {
                if (!ReferenceEquals(_documentoIdentidad, value))
                {
                    var previousValue = _documentoIdentidad;
                    _documentoIdentidad = value;
                    FixupDocumentoIdentidad(previousValue);
                    OnNavigationPropertyChanged("DocumentoIdentidad");
                }
            }
        }
        private DocumentoIdentidad _documentoIdentidad;
    
        [DataMember]
        public TrackableCollection<Usuario> Usuario
        {
            get
            {
                if (_usuario == null)
                {
                    _usuario = new TrackableCollection<Usuario>();
                    _usuario.CollectionChanged += FixupUsuario;
                }
                return _usuario;
            }
            set
            {
                if (!ReferenceEquals(_usuario, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_usuario != null)
                    {
                        _usuario.CollectionChanged -= FixupUsuario;
                    }
                    _usuario = value;
                    if (_usuario != null)
                    {
                        _usuario.CollectionChanged += FixupUsuario;
                    }
                    OnNavigationPropertyChanged("Usuario");
                }
            }
        }
        private TrackableCollection<Usuario> _usuario;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Articulo.Clear();
            DocumentoIdentidad = null;
            Usuario.Clear();
        }

        #endregion

        #region Corrección de asociación
    
        private void FixupDocumentoIdentidad(DocumentoIdentidad previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Autor.Contains(this))
            {
                previousValue.Autor.Remove(this);
            }
    
            if (DocumentoIdentidad != null)
            {
                if (!DocumentoIdentidad.Autor.Contains(this))
                {
                    DocumentoIdentidad.Autor.Add(this);
                }
    
                idTipoIdentidad = DocumentoIdentidad.idDocumentoIdentidad;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DocumentoIdentidad")
                    && (ChangeTracker.OriginalValues["DocumentoIdentidad"] == DocumentoIdentidad))
                {
                    ChangeTracker.OriginalValues.Remove("DocumentoIdentidad");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DocumentoIdentidad", previousValue);
                }
                if (DocumentoIdentidad != null && !DocumentoIdentidad.ChangeTracker.ChangeTrackingEnabled)
                {
                    DocumentoIdentidad.StartTracking();
                }
            }
        }
    
        private void FixupArticulo(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Articulo item in e.NewItems)
                {
                    item.Autor = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Articulo", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Articulo item in e.OldItems)
                {
                    if (ReferenceEquals(item.Autor, this))
                    {
                        item.Autor = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Articulo", item);
                    }
                }
            }
        }
    
        private void FixupUsuario(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Usuario item in e.NewItems)
                {
                    item.Autor = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Usuario", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Usuario item in e.OldItems)
                {
                    if (ReferenceEquals(item.Autor, this))
                    {
                        item.Autor = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Usuario", item);
                    }
                }
            }
        }

        #endregion

    }
}
