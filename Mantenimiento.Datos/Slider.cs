//------------------------------------------------------------------------------
// <auto-generated>
//     Este c칩digo se gener칩 a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
//     el c칩digo se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Mantenimiento.Datos.Entidades
{
    [DataContract(IsReference = true)]
    
    public partial class Slider: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int idSlider
        {
            get { return _idSlider; }
            set
            {
                if (_idSlider != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'idSlider' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _idSlider = value;
                    OnPropertyChanged("idSlider");
                }
            }
        }
        private int _idSlider;
    
        [DataMember]
        public string titulo
        {
            get { return _titulo; }
            set
            {
                if (_titulo != value)
                {
                    _titulo = value;
                    OnPropertyChanged("titulo");
                }
            }
        }
        private string _titulo;
    
        [DataMember]
        public string subTitulo
        {
            get { return _subTitulo; }
            set
            {
                if (_subTitulo != value)
                {
                    _subTitulo = value;
                    OnPropertyChanged("subTitulo");
                }
            }
        }
        private string _subTitulo;
    
        [DataMember]
        public string nombreBoton
        {
            get { return _nombreBoton; }
            set
            {
                if (_nombreBoton != value)
                {
                    _nombreBoton = value;
                    OnPropertyChanged("nombreBoton");
                }
            }
        }
        private string _nombreBoton;
    
        [DataMember]
        public string imagen
        {
            get { return _imagen; }
            set
            {
                if (_imagen != value)
                {
                    _imagen = value;
                    OnPropertyChanged("imagen");
                }
            }
        }
        private string _imagen;
    
        [DataMember]
        public string nombreArchivo
        {
            get { return _nombreArchivo; }
            set
            {
                if (_nombreArchivo != value)
                {
                    _nombreArchivo = value;
                    OnPropertyChanged("nombreArchivo");
                }
            }
        }
        private string _nombreArchivo;
    
        [DataMember]
        public string extension
        {
            get { return _extension; }
            set
            {
                if (_extension != value)
                {
                    _extension = value;
                    OnPropertyChanged("extension");
                }
            }
        }
        private string _extension;
    
        [DataMember]
        public string url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    OnPropertyChanged("url");
                }
            }
        }
        private string _url;
    
        [DataMember]
        public int orden
        {
            get { return _orden; }
            set
            {
                if (_orden != value)
                {
                    _orden = value;
                    OnPropertyChanged("orden");
                }
            }
        }
        private int _orden;
    
        [DataMember]
        public int idEstado
        {
            get { return _idEstado; }
            set
            {
                if (_idEstado != value)
                {
                    _idEstado = value;
                    OnPropertyChanged("idEstado");
                }
            }
        }
        private int _idEstado;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
