@model Mantenimiento.Negocio.Poco.GestionarClientePoco

@{
    Layout = "~/Views/Shared/_Layout2.cshtml";
}

<style>
    .Ndocument-error {
        border: 1px solid red;
    }
    .Ndocument-error:focus {
            border: 1px solid red;
    }
</style>
<!--begin::Content wrapper-->
<div class="d-flex flex-column flex-column-fluid">
    <!--begin::Toolbar-->
    <div id="kt_app_toolbar" class="app-toolbar pt-7 pt-lg-10">
        <!--begin::Toolbar container-->
        <div id="kt_app_toolbar_container" class="app-container container-fluid d-flex align-items-stretch">
            <!--begin::Toolbar wrapper-->
            <div class="app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100">
                <!--begin::Page title-->
                <div class="page-title d-flex flex-column justify-content-center gap-1 me-3">
                    <!--begin::Title-->
                    <h1 class="page-heading d-flex flex-column justify-content-center text-dark fw-bold fs-3 m-0">NUEVO
                        CLIENTE</h1>
                    <!--end::Title-->
                    <!--begin::Breadcrumb-->
                    <ul class="breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0">
                        <!--begin::Item-->
                        <li class="breadcrumb-item text-muted">
                            <a href="@Url.Action("Index","Cliente")" class="text-muted text-hover-primary">Home</a>
                        </li>
                        <!--end::Item-->
                        <!--begin::Item-->
                        <li class="breadcrumb-item">
                            <span class="bullet bg-gray-400 w-5px h-2px"></span>
                        </li>
                        <!--end::Item-->
                        <!--begin::Item-->
                        <li class="breadcrumb-item text-muted">Modúlos</li>
                        <!--end::Item-->
                    </ul>
                    <!--end::Breadcrumb-->
                </div>
                <!--end::Page title-->
            </div>
            <!--end::Toolbar wrapper-->
        </div>
        <!--end::Toolbar container-->
    </div>
    <!--end::Toolbar-->
    <!--begin::Content-->
    <div id="kt_app_content" class="app-content flex-column-fluid">
        <!--begin::Content container-->
        <div id="kt_app_content_container" class="app-container container-fluid">
            <!--begin::Form-->
            <form id="kt_add_cliente_form" class="form d-flex flex-column flex-lg-row">
                <!--begin::Main column-->
                <div class="d-flex flex-column flex-row-fluid gap-7 gap-lg-10">
                    <div class="d-flex flex-column gap-7 gap-lg-10">
                        <!--begin::General options-->
                        <div class="card card-flush py-4">
                            <!--begin::Card body-->
                            <div class="card-body pt-0">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="row mb-5 gx-1">
                                            <!--begin::Label-->
                                            <label class="required fs-6 fw-semibold mb-2">
                                                Tipo Doc.
                                                identidad:
                                            </label>
                                            <!--end::Label-->
                                            <!--begin::Input group-->
                                            <!--begin::Input-->
                                            @if (Model.ListarDocumentoIdentidad != null && Model.ListarDocumentoIdentidad.Any())
                                            {
                                                @Html.DropDownListFor(model => model.Persona.idDocumentoIdentidad,
                                                    new SelectList(Model.ListarDocumentoIdentidad, "idDocumentoIdentidad", "nombre",
                                                    Model.Persona.idDocumentoIdentidad),
                                                    "Seleccione tipo de documento",
                                                    new { @class = "form-select", onchange = "ajustarInput(this)" })
                                            }
                                            else
                                            {
                                                <select class="form-select" disabled>
                                                    <option>No hay datos disponibles</option>
                                                </select>
                                            }
                                            <!--end::Input-->
                                            <!--end::Input group-->
                                        </div>
                                        <div class="row mb-5 gx-1">
                                            <!--begin::Input group-->
                                            <!--begin::Label-->
                                            <label class="required fs-6 fw-semibold mb-2" for="txtNroIdentidad">Nro. documento:</label>
                                            <!--end::Label-->
                                            <!--begin::Input-->
                                            <div class="input-group flex-nowrap">
                                                <input type="text" id="txtNroIdentidad"
                                                       class="form-control"
                                                       placeholder="Ingrese número de documento"
                                                       value="@Model.Persona.nroIdentidad"
                                                       maxlength="11" />
                                                    <span class="input-group-text" id="basic-addon2">
                                                        <!-- Icono para DNI -->
                                                       <i class="las la-id-card" style="font-size: 25px;"></i>
                                                    </span>
                                            </div>
                                            <!--end::Input group-->
                                        </div>

                                        <div class="row mb-5 gx-1">
                                            <!--begin::Input group-->
                                            <!--begin::Label-->
                                            <label class="required fs-5 fw-semibold mb-2"
                                                   for="txtNombres">Nombres/Raz:</label>
                                            <!--end::Label-->
                                            <!--begin::Input-->
                                            <input type="text" id="txtNombres" class="form-control"
                                                   placeholder="Ingrese nombres o razón social"
                                                   value="@Model.Persona.nombres"
                                                   oninput="filtrarYCapitalizar(this)" />
                                            <!--end::Input group-->
                                        </div>
                                        <div class="row mb-5 gx-1">
                                            <!--begin::Input group-->
                                            <!--begin::Label-->
                                            <label class="fs-5 fw-semibold mb-2"
                                                   for="txtApellidoPaterno">Apellido paterno:</label>
                                            <!--end::Label-->
                                            <!--begin::Input-->
                                            <input type="text" id="txtApellidoPaterno"
                                                   class="form-control"
                                                   placeholder="Ingrese apellido paterno"
                                                   value="@Model.Persona.apellidoPaterno"
                                                   oninput="filtrarYCapitalizar(this)" />
                                            <!--end::Input group-->
                                        </div>
                                        <div class="row mb-5 gx-1">
                                            <!--begin::Input group-->
                                            <!--begin::Label-->
                                            <label class="fs-5 fw-semibold mb-2"
                                                   for="txtApellidoMaterno">Apellido materno:</label>
                                            <!--end::Label-->
                                            <!--begin::Input-->
                                            <input type="text" id="txtApellidoMaterno"
                                                   class="form-control"
                                                   placeholder="Ingrese apellido materno"
                                                   value="@Model.Persona.apellidoMaterno"
                                                   oninput="filtrarYCapitalizar(this)" />
                                            <!--end::Input group-->
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="row mb-5 gx-1">
                                            <!--begin::Input group-->
                                            <label class="required fs-6 fw-semibold mb-2"
                                                for="txtCelular">Celular:</label>
                                            <!--begin::Input-->
                                            <div class="position-relative d-flex align-items-center">
                                                <!--begin::Input-->
                                                <input type="text" id="txtCelular"
                                                    class="form-control mb-3 mb-lg-0"
                                                    placeholder="Ingrese número de celular" 
                                                    maxlength="9"
                                                    value="@Model.Persona.celular" />
                                                <!--end::Input-->
                                            </div>
                                            <!--end::Input group-->
                                        </div>
                                        <div class="row mb-5 gx-1">
                                            <!--begin::Input group-->
                                            <!--begin::Label-->
                                            <label class="fs-5 fw-semibold mb-2" for="txtTelefono">Teléfono:</label>
                                            <!--end::Label-->
                                            <!--begin::Input-->
                                            <input type="text" id="txtTelefono" class="form-control"
                                                placeholder="Ingrese número de teléfono:"
                                                maxlength="9"
                                                value="@Model.Persona.telefonos" />
                                            <!--end::Input group-->
                                        </div>
                                        <div class="row mb-5 gx-1">
                                            <!--begin::Input group-->
                                            <!--begin::Label-->
                                            <label class="fs-5 fw-semibold mb-2" for="txtDireccion">Dirección:</label>
                                            <!--end::Label-->
                                            <!--begin::Input-->
                                            <input type="text" id="txtDireccion" class="form-control"
                                                placeholder="Ingrese dirección:" value="@Model.Persona.direccion"
                                                oninput="filtrarYCapitalizarDirYcontac(this)" />
                                            <!--end::Input group-->
                                        </div>
                                        <div class="row mb-5 gx-1">
                                            <!--begin::Input group-->
                                            <!--begin::Label-->
                                            <label class="fs-5 fw-semibold mb-2" for="txtDetalleContacto">
                                                Detalles de
                                                contacto:
                                            </label>
                                            <!--end::Label-->
                                            <!--begin::Input-->
                                            <textarea type="text" id="txtDetalleContacto"
                                                      class="form-control"
                                                      placeholder="Ingrese detalles de contacto:"
                                                      value="@Model.Persona.detalleContacto"
                                                      style="height: 130px;"
                                                      oninput="filtrarYCapitalizarDirYcontac(this)"
                                                      maxlength="300">
                                            @if (Model.Persona != null && !string.IsNullOrEmpty(Model.Persona.detalleContacto))
                                            {
                                                @Model.Persona.detalleContacto
                                            }</textarea>
                                            <!--end::Input group-->
                                        </div>
                                    </div>
                                </div>
                                <!--end::Card header-->
                            </div>
                            <!--end::General options-->
                        </div>
                        <!--end::Tab content-->
                        <div class="d-flex justify-content-end">
                            <!--begin::Button-->
                            <a href="@Url.Action("Index","Cliente")" id="kt_ecommerce_add_product_cancel"
                                class="btn btn-light me-5">Cancelar</a>
                            <!--end::Button-->
                            <!--begin::Button-->
                            <button type="button" id="btnGuardar" onclick="Guardar();" class="btn btn-primary">
                                <span class="indicator-label">Guardar</span>
                                <span class="indicator-progress">
                                    Espere un momento...
                                    <span class="spinner-border spinner-border-sm align-middle ms-2"></span>
                                </span>
                            </button>
                            <!--end::Button-->
                        </div>
                    </div>
                    <!--end::Main column-->
                </div>
            </form>
            <!--end::Form-->
        </div>
        <!--end::Content container-->
    </div>
    <!--end::Content-->
</div>
<!--end::Content wrapper-->

@section Scripts {
    <script src="@Url.Content("~/Scripts/library.js?v=5.0")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/metronic/plugins/custom/formrepeater/formrepeater.bundle.js")"></script>

    <script>

        $(document).ready(function () {
            // Agrega el evento input al campo txtNroIdentidad
            $("#txtNroIdentidad").on("input", function () {
                // Obtiene el valor del número de documento
                var numeroDocumento = $(this).val();
                //console.log("ndoc es " + numeroDocumento);
                // Verificar la longitud del número de documento
                if (numeroDocumento.length === 8 || numeroDocumento.length === 11) {
                    // La longitud del número de documento es válida, enviar la solicitud AJAX para validar
                    ValidarNdocumento(numeroDocumento);
                }
            });

            // Obtén el texto seleccionado del tipo de documento al cargar la página
            var tipoDocumentoSeleccionado = $("#Persona_idDocumentoIdentidad option:selected").text();

            // Verifica si el tipo de documento seleccionado es "RUC"
            if (tipoDocumentoSeleccionado === "RUC") {
                // Si es "RUC", desactiva los campos de apellido paterno y apellido materno
                $("#txtApellidoPaterno").prop("disabled", true);
                $("#txtApellidoMaterno").prop("disabled", true);
            } else {
                // Si es otro tipo de documento, activa los campos de apellido paterno y apellido materno
                $("#txtApellidoPaterno").prop("disabled", false);
                $("#txtApellidoMaterno").prop("disabled", false);
            }

            // Agrega un evento change al campo Persona_idDocumentoIdentidad para detectar cambios en la selección
            $("#Persona_idDocumentoIdentidad").on("change", function () {
                // Obtén el valor seleccionado del tipo de documento
                var tipoDocumento = $("#Persona_idDocumentoIdentidad option:selected").text();
                //console.log("val " + tipoDocumento)
                // Verifica si el tipo de documento es "RUC"
                if (tipoDocumento === "RUC") {
                    // Si es "RUC", desactiva los campos de apellido paterno y apellido materno
                    $("#txtApellidoPaterno").prop("disabled", true);
                    $("#txtApellidoMaterno").prop("disabled", true);
                } else {
                    // Si es otro tipo de documento, activa los campos de apellido paterno y apellido materno
                    $("#txtApellidoPaterno").prop("disabled", false);
                    $("#txtApellidoMaterno").prop("disabled", false);
                }
            });

        });

        let botonDesactivado = false;

        function ValidarNdocumento(numeroDocumento) {
            // Realizar una solicitud AJAX para validar el número de documento
            $.ajax({
                url: "@Url.Action("ValidarNdocumento", "Cliente")",
                type: 'POST',
                data: { numeroDocumento: numeroDocumento },
                success: function (data) {
                    // Manejar la respuesta del servidor
                    if (data === true) {
                        // El número de documento existe, agregar borde rojo y mostrar mensaje de error
                        $("#txtNroIdentidad").addClass("Ndocument-error");
                        botonDesactivado = true;
                        $("#btnGuardar").prop("disabled", true);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'El número de documento ya existe',
                            confirmButtonText: 'OK'
                        });
                    } else {
                        // El número de documento no existe, quitar borde rojo y mostrar mensaje de éxito
                        $("#txtNroIdentidad").removeClass("Ndocument-error");
                        botonDesactivado = false;
                        $("#btnGuardar").prop("disabled", false);
                    }
                },
                error: function (error) {
                    // Manejar errores de la solicitud AJAX
                    console.error("Error al llamar al controlador: " + error);
                }
            });
        }

        function Validar() {
            if ($("#Persona_idDocumentoIdentidad").val() == "") {
                ShowMessage(0, "Debe seleccionar un tipo de documento");
                return false;
            }
            // Verificar si se ha ingresado un número de documento
            if ($("#txtNroIdentidad").val() == "") {
                ShowMessage(0, "Debe ingresar Nro. documento");
                return false;
            }
            // Obtener el tipo de documento seleccionado
            var tipoDocumento = $("#Persona_idDocumentoIdentidad option:selected").text();

            // Obtener el número de documento ingresado
            var numeroDocumento = $("#txtNroIdentidad").val();

            // Verificar la longitud del número de documento según el tipo seleccionado
            if ((tipoDocumento == "DNI" && numeroDocumento.length != 8) || (tipoDocumento == "RUC" && numeroDocumento.length != 11)) {
                ShowMessage(0, "El número de documento debe tener " + (tipoDocumento == "DNI" ? "8" : "11") + " dígitos");
                return false;
            }
            if ($("#txtNombres").val() == "") {
                ShowMessage(0, "Debe ingresar sus nombres");
                return false;
            }
            if ($("#Persona_idDocumentoIdentidad option:selected").text() != "RUC") {
                // Si el tipo de documento NO es RUC
                if ($("#txtApellidoPaterno").val() == "") {
                    ShowMessage(0, "Debe ingresar su apellido paterno");
                    return false;
                }
                if ($("#txtApellidoMaterno").val() == "") {
                    ShowMessage(0, "Debe ingresar su apellido materno");
                    return false;
                }
            }
            if ($("#txtCelular").val() == "") {
                ShowMessage(0, "Debe ingresar su número de celular");
                return false;
            }
            // Verificar la longitud del número de celular
            if ($("#txtCelular").val().length !== 9) {
                ShowMessage(0, "El número de celular debe tener 9 dígitos");
                return false;
            }
            if (botonDesactivado) {
                // El botón está desactivado, mostrar mensaje de advertencia
                Swal.fire({
                    icon: 'warning',
                    title: 'Advertencia',
                    text: 'No se pueden guardar los datos ya que previamente el botón estaba desactivado',
                    confirmButtonText: 'OK'
                });
                return false;
            }

            return true;
        }

        function Guardar() {
            if (!Validar()) {
                return false;
            }
            // Obtener el índice seleccionado
            var selectedIndex = $("#Persona_idDocumentoIdentidad").val();

            var formData = new FormData();

            formData.append('Persona.idPersona', @Model.Persona.idPersona);
            formData.append('Persona.idDocumentoIdentidad', selectedIndex);
            formData.append('Persona.idTipoPersona', 1);
            formData.append('Persona.nombres', $("#txtNombres").val());
            formData.append('Persona.apellidoPaterno', $("#txtApellidoPaterno").val());
            formData.append('Persona.nroIdentidad', $("#txtNroIdentidad").val());
            formData.append('Persona.apellidoMaterno', $("#txtApellidoMaterno").val());
            formData.append('Persona.direccion', $("#txtDireccion").val());
            formData.append('Persona.telefonos', $("#txtTelefono").val());
            formData.append('Persona.celular', $("#txtCelular").val());
            formData.append('Persona.detalleContacto', $("#txtDetalleContacto").val());
            formData.append('Persona.idEstado', 1);

           /* console.log(selectedIndex);
            console.log("dato del select:");
            console.log("Contenido de formData:");

            for (let pair of formData.entries()) {
                console.log(pair[0] + ": " + pair[1]);
            }*/
            let isEditing = @Html.Raw(Json.Encode(Model.IsEditing)); // Obtener el valor de IsEditing desde el modelo

            $.ajax({
                url: "@Url.Action("Guardar", "Cliente")",
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    let message = isEditing ? "¡El Cliente se ha actualizado correctamente!" : "¡El Cliente se ha registrado correctamente!";
                    Swal.fire({
                        text: message,
                        icon: "success",
                        buttonsStyling: false,
                        confirmButtonText: "Listo",
                        customClass: { confirmButton: "btn btn-primary" },
                    }).then(function () {
                        window.location.href = '@Url.Action("Index", "Cliente")';
                    });
                },
                error: function (error) {
                    //console.error("Error al enviar el formulario");
                    // Mostrar mensaje de error
                    Swal.fire({
                        text: "Se produjo un error al enviar el formulario. Por favor, inténtalo de nuevo.",
                        icon: "error",
                        buttonsStyling: false,
                        confirmButtonText: "Ok",
                        customClass: { confirmButton: "btn btn-primary" },
                    });
                },
            });
        }

        // Obtener el input
        var txtNroIdentidad = document.getElementById("txtNroIdentidad");
        var txtCelular = document.getElementById("txtCelular");
        var txtTelefono = document.getElementById("txtTelefono");

        // Agregar un event listener para el evento "keydown" que llame a la función de validación
        txtNroIdentidad.addEventListener("keydown", function (event) {
            validarNumero(event); // Pasar el evento actual como argumento a la función de validación
        });

        // Agregar un event listener para el evento "keydown" que llame a la función de validación
        txtCelular.addEventListener("keydown", function (event) {
            validarNumero(event); // Pasar el evento actual como argumento a la función de validación
        });

        // Agregar un event listener para el evento "keydown" que llame a la función de validación
        txtTelefono.addEventListener("keydown", function (event) {
            validarNumero(event); // Pasar el evento actual como argumento a la función de validación
        });

        // Función para validar si la tecla presionada es un número
        function validarNumero(event) {
            // Obtener el código de la tecla presionada
            var codigoTecla = event.keyCode || event.which;

            // Permitir los números del 0 al 9 y las teclas de navegación
            if ((codigoTecla >= 48 && codigoTecla <= 57) ||  // Números del teclado alfanumérico
                (codigoTecla >= 96 && codigoTecla <= 105) || // Números del teclado numérico
                codigoTecla == 8 ||  // Tecla de retroceso
                codigoTecla == 9 ||  // Tecla de tabulación
                codigoTecla == 37 || // Flecha izquierda
                codigoTecla == 39 || // Flecha derecha
                codigoTecla == 46 || // Tecla de suprimir
                codigoTecla == 13 || // Tecla de enter
                (event.ctrlKey && (codigoTecla == 67 || codigoTecla == 86))) { // Permitir copiar (Ctrl+C) y pegar (Ctrl+V)
                return true; // Permitir la tecla
            } else {
                event.preventDefault(); // Bloquear la tecla
                return false; // Evitar la entrada de caracteres no deseados
            }
        }

        // Función para capitalizar la Primera palabra
        function filtrarYCapitalizar(input) {
            // Obtener el valor actual del input
            let valor = input.value;
            // Convertir todo el texto a minúsculas
            valor = valor.toLowerCase();
            // Aplicar la expresión regular para permitir solo letras y espacios
            valor = valor.replace(/[^a-zA-Z\s]/g, '');
            // Capitalizar la primera letra de cada palabra
            valor = valor.replace(/\b\w/g, function (char) {
                return char.toUpperCase();
            });
            // Actualizar el valor del input con solo las palabras capitalizadas
            input.value = valor;
        }

        // Función para capitalizar la Primera palabra en dirección y contacto
        function filtrarYCapitalizarDirYcontac(input) {
            // Obtener el valor actual del input
            let valor = input.value;
            // Convertir todo el texto a minúsculas
            valor = valor.toLowerCase();
            // Aplicar la expresión regular para permitir letras, números y algunos caracteres especiales
            valor = valor.replace(/[^a-zA-Z0-9\s°.,()-]/g, '');
            // Capitalizar la primera letra de cada palabra
            valor = valor.replace(/\b\w/g, function (char) {
                return char.toUpperCase();
            });
            // Actualizar el valor del input con solo las palabras capitalizadas
            input.value = valor;
        }

        // Función para limpiar el campo txtNroIdentidad
        function limpiarCampo() {
            document.getElementById("txtNroIdentidad").value = ""; // Establece el valor del campo como una cadena vacía
            // Limpia el mensaje de advertencia si el número de documento está vacío
            //$("#mensajeAdvertencia").text("");
            //$('#mensajeAdvertencia').addClass('d-none');
            //$("#btnGuardar").prop("disabled", false);
        }

        // Función para ajustar las propiedades del input según la selección del dropdown
        function ajustarInput(select) {

            limpiarCampo();
            // Obtener el valor seleccionado del dropdown
            var tipoDocumento = select.value;
            //console.log("doc es " + tipoDocumento);
            // Obtener el input de número de identidad
            var txtNroIdentidad = document.getElementById('txtNroIdentidad');

            // Verificar el tipo de documento seleccionado
            if (tipoDocumento == 1) {
                // Si es DNI, establecer una longitud máxima de 8 dígitos
                txtNroIdentidad.maxLength = 8;
            } else {
                // Restablecer las propiedades predeterminadas del input
                txtNroIdentidad.maxLength = 11;

            }
        }

    </script>
}
