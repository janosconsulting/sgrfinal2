@model Dictionary<string, List<string>>
<!DOCTYPE html>
<html lang="en">
<!--<< Header Area >>-->
<!-- Mirrored from gramentheme.com/html/infotek/about.html by HTTrack Website Copier/3.x [XR&CO'2014], Wed, 12 Jun 2024 13:43:11 GMT -->

<body>
    <div class="breadcrumb-wrapper bg-cover" style="background-image: url('@Url.Content("~/Content/theme/assets/img/breadcrumb.jpg")');">
        <div class="border-shape">
            <img src="@Url.Content("~/Content/theme/assets/img/element.png")" alt="shape-img">
        </div>
        <div class="line-shape">
            <img src="@Url.Content("~/Content/theme/assets/img/line-element.png")" alt="shape-img">
        </div>
        <div class="container">
            <div class="page-heading">
                <h1 class="wow fadeInUp" data-wow-delay=".3s">Clientes</h1>
                <ul class="breadcrumb-items wow fadeInUp" data-wow-delay=".5s">
                    <li>
                        <a href="index.html">
                            Home
                        </a>
                    </li>
                    <li>
                        <i class="fas fa-chevron-right"></i>
                    </li>
                    <li>
                        Clientes
                    </li>
                </ul>
            </div>
        </div>
    </div>
    @functions {
        public static string LimpiarTexto(string texto)
        {
            var normalized = texto.ToLowerInvariant().Normalize(System.Text.NormalizationForm.FormD);
            var sb = new System.Text.StringBuilder();
            foreach (var c in normalized)
            {
                var unicodeCategory = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c);
                if (unicodeCategory != System.Globalization.UnicodeCategory.NonSpacingMark &&
                    (char.IsLetterOrDigit(c) || c == '_'))
                {
                    sb.Append(c);
                }
            }
            return sb.ToString();
        }
    }

    <section class="section">
        <div class="container">
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
            <link rel="stylesheet" href="@Url.Content("~/Scripts/assets/css/styleCodetus.css")" />

            <div class="acordeon-rubros">
                <div class="titulo-dentro">Clientes por Categorías</div>

                <div class="accordion accordion-flush" id="accordionFlushExample">
                    @foreach (var rubro in Model)
                    {
                        var idRubro = rubro.Key.Replace(" ", "").ToLower(); // id para collapse
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="flush-heading-@idRubro">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse-@idRubro" aria-expanded="false" aria-controls="flush-collapse-@idRubro">
                                    @rubro.Key
                                </button>
                            </h2>
                            <div id="flush-collapse-@idRubro" class="accordion-collapse collapse" aria-labelledby="flush-heading-@idRubro" data-bs-parent="#accordionFlushExample">
                                <div class="accordion-body">
                                    <div class="logo-container d-flex flex-wrap gap-4">
                                        @foreach (var imagen in rubro.Value)
                                        {
                                            var nombreSinExtension = System.IO.Path.GetFileNameWithoutExtension(imagen).ToLower();

                                            // Diccionario de rubros con sus equivalentes como prefijo de archivo
                                            var rubrosPrefijos = new Dictionary<string, string>
                                             {
                                             { "INDUSTRIA", "industria" },
                                            { "SALUD & BELLEZA", "salud_&_belleza" },
                                            { "FERRETERÍAS", "ferreterias" },
                                            { "BARES Y RESTAURANTES", "bares_y_restaurantes" },
                                            { "AGRO Y VETERINARIAS", "agro_y_veterinarias" },
                                            { "EDUCACIÓN", "educacion" },
                                            { "MODA Y CALZADOS", "moda_y_calzados" },
                                            { "TRANSPORTES", "transportes" },
                                            { "INMOBILIARIA", "inmobiliaria" },
                                            { "REPUESTOS", "repuestos" },
                                            { "SERVICIOS", "servicios" },
                                            { "GENERAL", "general" }
                                             };
                                            // Obtener el prefijo del rubro actual
                                            var claveRubro = rubro.Key.Trim().ToUpperInvariant();
                                            var prefijo = rubrosPrefijos.ContainsKey(claveRubro) ? rubrosPrefijos[claveRubro] : "";
                                            var nombreLimpio = nombreSinExtension;
                                            // Si empieza con el prefijo, lo quitamos
                                            if (!string.IsNullOrEmpty(prefijo) && nombreLimpio.StartsWith(prefijo + "_"))
                                            {
                                                nombreLimpio = nombreLimpio.Substring(prefijo.Length + 1); // quitar el prefijo y el _
                                            }
                                            // Quitar palabra 'logo'
                                            var indexLogo = nombreLimpio.IndexOf("logo", StringComparison.OrdinalIgnoreCase);
                                            if (indexLogo >= 0)
                                            {
                                                nombreLimpio = nombreLimpio.Remove(indexLogo, 4);
                                            }

                                            // Reemplazar guiones bajos con espacio, limpiar
                                            nombreLimpio = nombreLimpio.Replace("_", " ").Trim();

                                            // Capitalizar
                                            var soloNombre = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(nombreLimpio);

                                            <div class="text-center">
                                                <img src="@Url.Content("~/Uploads/Images/" + imagen)"
                                                     class="logo-cliente"
                                                     alt="Logo @rubro.Key"
                                                     title="@soloNombre" />
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
        </div>
    </section>
</body>

<!-- Mirrored from gramentheme.com/html/infotek/about.html by HTTrack Website Copier/3.x [XR&CO'2014], Wed, 12 Jun 2024 13:43:11 GMT -->
</html>